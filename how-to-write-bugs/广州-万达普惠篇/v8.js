// ==========================================================================================
// ============================== v8 引擎 ===================================================
// ==========================================================================================

// ============================== 执行一段 js 代码 ==============================

// 1 预解析 parser
// 2 通过词法和语法解析，生成 AST 抽象语法树
// 3 生成字节码 基线编译器将 AST 转换成字节码
// 4 生成机器码 优化编译器将字节码转换成机器码，逐行执行



// ============================== v8 垃圾回收 ==============================

// 1 栈内存，存储基本类型数据和引用类型的内存地址，调用栈上下文切换后即刻清除
// 2 堆内存，存储引用类型的数据，分为新生代内存和老生代内存
// a 新生代内存为临时分配的内存，空间小，存在时间短
// b 新生代内存回收机制：
// b-1 新生代内存在62位系统下仅有32M
// b-2 新生代内存分为 from 和 to 两个部分，首先回收 from 中的非存活对象，将存活对象复制到 to 中，然后将 from 和 to 置换，等待下一次回收
// c 老生代内存回收机制：
// c-1 晋升：如果新生代的变量经过多次回收仍然存在，则会被放入到老生代内存中
// c-2 标记清楚：老生代内存会变量所有的对象并打上标记，然后对正在使用或者强引用的对象清除标记，回收被标记的对象
// c-3 整理内存碎片：将对象移动到内存的一端



// ============================== js 相对于 java/c++ 等语言的弱势 ==============================

// 1 动态类型： 
// a 每次存储属性或者寻找方法的时候，都要先对类型进行检查
// b 动态类型很难在编译阶段进行优化
// 2 属性存取：
// a java/c++ 等语言属性是存取在数组中的，通过数组位移即可获取，js 是存取在对象中的，每次获取都要进行哈希查询



// ============================== v8 引擎的优化 ==============================

// 1 优化 JIT（即时编译）：如果一段代码被执行多次，V8 会将这段代码转化为机器码并缓存下来，下次运行时直接使用机器码
// 2 隐藏类 js 需要进行字符串匹配才能获取变量信息，v8 借用了类和偏移位置的思想，将对象划分成不同的组，即隐藏类
// 3 内嵌缓存 缓存对象查询的结果：获取隐藏类地址  --  根据属性名查找偏移值 -- 计算改属性地址
// 4 垃圾回收管理
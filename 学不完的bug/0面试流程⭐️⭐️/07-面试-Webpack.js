
// ************************************************************************************************************************

// Webpack打包优化⭐️⭐️

// webpack 使用 SplitChunksPlugin去重和分离 chunk，而在vue-cli 3中是在的vue.config.js中只要配置chainWebpack中的splitChunks即可
// 通过UglifyJSPlugin来对js文件进行压缩，以此减小js文件的大小，加速资源加载速度，但是一般在生产环节开启，因为会拖慢了webpack原本的编译速度
// 我们可以使用compression-webpack-plugin插件进行压缩，相当于gzip的效果
// Tree-shaking也叫摇树优化，是webpack 2之后引入原本rollup特有的Tree-shaking。用来将无用代码移除。而tree-shaking 是在 ES6 modules 的静态特性基础上才得以实现的，也就是说只有你使用到 ES6 module  才能使用 tree-shaking
// 开发中，生产环节或者开发环境我们想对比下，分析报告进行性能优化对比，确定vue项目的性能是否得到完善，可以通过配置webpack - bundle - analyzer插件，他能以图形化的方式展示bundle中所有的模块的构成的各自构成的大小，执行方式： npm run build--report


// ************************************************************************************************************************

// Webpack - loaders⭐️

// url-loader 像 file loader 一样工作，但如果文件小于限制，可以返回 data URL
// file - loader 将文件发送到输出文件夹，并返回（相对）URL
// image - loader：加载并且压缩图片文件

// html-loader 导出 HTML 为字符串，需要引用静态资源
// style-loader 将模块的导出作为样式添加到 DOM 中
// css - loader 加载 CSS，支持模块化、压缩、文件导入等特性
// less - loader 加载和转译 LESS 文件
// sass - loader 加载和转译 SASS / SCSS 文件
// postcss - loader 使用 PostCSS 加载和转译 CSS / SSS 文件

// babel-loader 加载 ES2015+ 代码，然后使用 Babel 转译为 ES5
// vue-loader 加载和转译 Vue 组件

// eslint - loader：通过 ESLint 检查 JavaScript 代码
// define - plugin：定义环境变量
// commons - chunk - plugin：提取公共代码
// uglifyjs - webpack - plugin：通过UglifyES压缩ES6代码
// source - map - loader：加载额外的 Source Map 文件，以方便断点调试

// ************************************************************************************************************************

// Webpack - plugins⭐️

// ************************************************************************************************************************

// Webpack 打包过程
// 1、初始化：启动构建，读取和合并参数，加载plugin，实例化complier
// 2、编译：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。
// 3、输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。

// ************************************************************************************************************************
// ************************************************************************************************************************
// ************************************************************************************************************************

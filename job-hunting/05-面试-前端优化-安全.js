// ************************************************** 前端性能优化 ⭐️*******************************************************

// 1 资源压缩合并，减少 HTTP 请求 - 头部css / 底部js / 雪碧图 / css合并压缩 / js合并压缩 / base64

// 2 非核心代码异步加载（异步加载的方式，异步加载的区别）
// 2.1.1 动态脚本加载
// 2.1.2 defer
// 2.1.3 async
// defer 是在 HTML 解析完之后才会执行，如果是多个，按照加载的顺序依次执行。defer脚本会在DOMContentLoaded和load事件之前执行。
// async 是在脚本加载完之后立即执行，如果是多个，执行顺序和加载顺序无关。async会在load事件之前执行，但并不能确保与DOMContentLoaded的执行先后顺序。

// 3 利用浏览器缓存（缓存的分类，缓存原理）
// 移步 04-HTTP

// 4 使用 CDN

// 5 预解析 DNS
// 5.1 强制打开 <a> 标签的 dns 解析
{/* <meta http-equiv="x-dns-prefetch-controller" content="on"> */}
// 5.2 DNS预解析
{/* <link rel="dns-prefetch" href="//host_name_to_prefetch.com"> */}


// ********************************************* 从 url 输入到页面加载显示完成 ********************************************

// dns域名解析，获取真实ip，向服务器发起请求
// 服务器返回数据，浏览器加载文件（html css js img 等）
// 浏览器对资源进行语法解析，建立相应的内部结构（dom tree 等）
// 载入解析到的资源文件，渲染页面

// ************************************************** 前端安全 ⭐️*******************************************************

// CSRF（Cross-site request forgery）跨站请求伪造 - 携带 cookie 攻击
// 1 用户A登录网站B
// 2 用户A在未退出B的登录状态下，打开新的TAB页访问网站C，网站C中的攻击代码会携带A的登录信息请求网站B
// 3 网站B把A的信息返回给网站C，用户A的信息泄漏

// 解决方案
// 1 CSRF Token验证
// 2 Referer验证
// 3 隐藏令牌 Header
// 4 SameSite


// XSS（cross-site scripting）跨域脚本攻击 - 挟持 cookie
// 1 在Web页面插入恶意Script代码
// ex：用户提交恶意评论到数据库，页面获取数据加载后恶意代码被执行

// 解决方案
// 1 标签转义，特殊字符转义
// 2 把所有非字母、数字字符转义称小于256的ASCII字符
// 3 encodeURIComponent对url转码
// 4 HttpOnly - 禁止操作 cookie

// *************************************************** 错误监控 ************************************************************

// 1 即时运行错误
// 1.1 try...catch
// 1.2 window.onerror


// 2 资源加载错误
// 2.1 object.onerror
// 2.2 performance.getEntries()
// 2.3 Error 事件捕捉
// 2.3.1 (new Image()).src = 'http://www.baidu.com/test?t=hahha';

// ************************************************************************************************************************
// ************************************************************************************************************************
// ************************************************************************************************************************

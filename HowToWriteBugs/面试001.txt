2. HTTP
2.1. get和post有什么区别？
2.2. http1.1和http2.0有什么区别？
2.3. 说一下http缓存
2.4. 200状态码一定是服务器返回的吗？
2.5. Expires和Cache-Control的max-age指令分别是如何确定过期时间的？优劣势是什么？
2.6. 为什么有了Last-Modified还要有ETag？解决了什么问题？
2.7. no-store和no-cache的意思分别是什么？
2.8. https为什么比http安全
2.9. 说一下三次握手四次挥手
3. JS
3.1. 0.1 + 0.2 !== 0.3？为什么？
3.2. 如何解决上面说的精确度丢失问题？
3.3. 闭包
3.4. 什么是作用域？什么是作用域链？函数执行上下文包含了哪些内容？
3.5. this指向
3.6. es6的问题
3.7. 原型 + 原型链 (这个属于必问的题)
3.8. eventLoop
3.9. 垃圾回收机制
3.10. 说一下数据类型，如何判断一个数组
3.11. 常用的设计模式？
3.12. 浏览器渲染过程
3.13. 性能优化
3.14. setTimeout和requestAnimationFrame做动画有区别吗？哪一个更好？为什么？
3.15. 介绍一下同源策略？你知道那些跨域方法？cors跨域的原理是什么有了解过吗？
4. CSS
4.1. 介绍一下盒模型？
4.2. flex: 1代表什么意思
4.3. 用过flex布局吗？都有哪些属性？
4.4. 说说什么是BFC，一般你都用来干什么，解决了什么问题？
4.5. 实现元素水平垂直居中？尽可能说多一些方法？
4.6. 左侧固定 + 右侧自适应布局？说说几种方案？
4.7. 重绘和重排？
5. React
5.1. 都用过那些版本的react，分别介绍一下区别？
5.2. 说一下前端路由，他们的实现原理分别是什么？
5.3. 你能手写个简单的redux吗？
5.4. redux里面dispatch是如何正确找到reducer的？
5.5. redux怎么挂载中间件的？它的执行顺序是什么样的？
5.6. 除了redux，还用过其他的状态管理库吗？
5.7. redux的缺点？
5.8. react生命周期？
5.9. setState什么情况下同步，什么情况下异步？
5.10. 讲一下react的事件机制，为什么这么设计？react17里面有什么变化吗？
5.11. class组件跟函数组件有什么区别？
5.12. 能在if判断里面写hooks吗？为什么不能？
5.13. HOC和hooks的区别？
5.14. hooks实现原理？不用链表可以用其他方法实现吗？
5.15. useEffect依赖传空数组和componentDidMount有什么区别吗？
5.16. useeffect和useLayouteffect区别
5.17. 介绍一下react dom diff
5.18. 介绍一下Vdom？
5.19. 在React中，有做过什么性能优化吗？
5.20. React.memo()和React.useMemo()有什么区别吗?
5.21. useCallback和useMemo的区别？
5.22. React.fiber了解吗？造成卡顿的原因是什么？react.fiber里面是怎么解决的？中断更新之后，下次是如何找到要更新的位置的？
5.23. 函数式编程
5.24. 高阶组件里面如何防止ref丢失？
6. webpack && node
6.1. 进程和线程的区别
6.2. 介绍一下模块发展史
6.3. node_modules问题
6.4. webpack打包原理
6.5. webpack性能优化你是怎么做的？
6.6. loader和plugin的区别？
6.7. loader的执行顺序是什么？如何写一个loader？如何写一个plugin？loader有异步的吗？
6.8. file-loader返回的是什么？
6.9. webpack有几种hash，它们有什么区别？一般你在项目里面是用哪种hash？
6.10. webpack5有哪些新特性？
6.11. webpack热更新原理？
6.12. tree-shaking原理？
6.13. babel转换代码的过程，箭头函数转普通函数的时候，是如何处理this的？
7. 手写题
7.1. 节流和防抖
7.2. 写一种你熟悉的排序？
7.3. (字节)说出打印顺序
7.4. instanceof原理，能尝试手写一个instanceof函数吗
7.5. 实现new关键字
7.6. 大数相加
7.7. (滴滴)扁平化数组
7.8. 实现一个event类
7.9. 实现千分位format函数
7.10. (字节、滴滴)根据传入的姓名权重信息，返回随机的姓名（随机概率依据权重）
7.11. (字节)实现一个promise.all
7.12. (滴滴)两数之和
7.13. (字节)无重复最长子串
7.14. 实现new Queue类
